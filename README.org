#+STARTUP: content indent
#+title: Genie - Run Clojure scripts with a daemon process

* Introduction
Another way of mitigating the slow startup of Clojure on the JVM, by starting a daemon in the background. Using the following projects:
- [[https://nrepl.org/nrepl/index.html][nRepl]] - for running the daemon and providing client connections (using bencode).
- [[https://github.com/clj-commons/pomegranate][Pomegranate]] - for dynamically loading libraries
- [[https://book.babashka.org][Babashka]] - for the client and installation script.
* Starting points
- Every script that can be executed by clj (using deps.edn) should also be able to be executed using genie
- Fast startup of the script
- It might help to see the daemon as part of the OS
* Installation
Genie uses [[https://book.babashka.org][Babashka]] for the client and installation. So make sure you have this installed.

Then:
#+begin_src bash :tangle yes
  bb ./install.clj
#+end_src

Install directories may be given:
#+begin_src text :tangle yes
install.clj - babashka script to install genie:
  daemon, client, config, scripts and template
      --daemon DAEMON      Daemon directory
      --client CLIENT      Client directory
      --config CONFIG      Config directory
      --logdir LOGDIR      Logging dir for daemon and client
      --scripts SCRIPTS    Scripts directory
      --template TEMPLATE  Template directory
      --dryrun             Show what would have been done
      --force              Force re-creating uberjar
  -h, --help
#+end_src

With default locations:

| item       | location                 | specs, env-vars                           |
|------------+--------------------------+-------------------------------------------|
| java       | <system>                 | GENIE_JAVA_CMD, JAVA_CMD, JAVA_HOME, java |
| daemon/jar | ~/tools/genie, lein run  | GENIE_DAEMON_DIR (also genied.sh)         |
| config     | ~/.config/genie          | GENIE_CONFIG_DIR (also templates)         |
| log-dir    | ~/log                    | GENIE_LOG_DIR                             |
| templates  | ~/.config/genie/template | GENIE_TEMPLATE_DIR, GENIE_CONFIG_DIR      |
| scripts    | ~/bin                    | GENIE_SCRIPTS_DIR                         |
| client     | ~/bin                    | GENIE_CLIENT_DIR                          |

You might want to add the following environment vars to your .profile:

#+begin_src emacs-lisp :tangle yes
export GENIE_CLIENT_DIR=~/bin
export GENIE_DAEMON_DIR=~/tools/genie
export GENIE_JAVA_CMD=java
export GENIE_CONFIG_DIR=~/.config/genie
export GENIE_LOG_DIR=~/log
export GENIE_TEMPLATE_DIR=~/.config/genie/template
export GENIE_SCRIPTS_DIR=~/bin
#+end_src

And add a crontab entry so the Genie daemon starts automatically:
#+begin_src emacs-lisp :tangle yes
@reboot /home/your-user-name/tools/genie/genied.sh
#+end_src

Or, in Windows: TBD
* Test without installation
If you want to check out Genie without installing it, assuming you have Babashka and Leiningen installed (this uses 'lein run'):
#+begin_src bash :tangle yes
bb client/genie.clj --start-daemon
bb client/genie.clj test/test.clj -a
#+end_src

* Usage
An example script is shown below.

#+begin_src clojure :tangle yes
  #! /usr/bin/env genie

  (ns test
    (:require 
     [ndevreeze.cmdline :as cl]
     [clojure.data.csv :as csv]))

  (def cli-options
    [["-c" "--config CONFIG" "Config file"]
     ["-h" "--help" "Show this help"]])

  (defn data-csv
    [opt ctx]
    (println "Parsing csv using data.csv: " (csv/read-csv "abc,123,\"with,comma\"")))

  (defn script [opt arguments ctx]
    (println "ctx: " ctx)
    (data-csv opt ctx))

  ;; expect context/ctx now as first parameter, a map.
  (defn main [ctx args]
    (cl/check-and-exec "" cli-options script args ctx))

  ;; for use with 'clj -m test-dyn-cl
  (defn -main
    "Entry point from clj cmdline script"
    [& args]
    (cl/check-and-exec "" cli-options script args {:cwd "."})
    (System/exit 0))

#+end_src

A deps.edn should be in the same directory:
#+begin_src clojure :tangle yes
  {:paths [""] ;; so script will be found in current dir, not in src-subdir.
   :deps
   {clojure.java-time/clojure.java-time {:mvn/version "0.3.2"}
    org.clojure/clojure {:mvn/version "1.10.1"}
    org.clojure/data.csv {:mvn/version "1.0.0"}}}
#+end_src

Then execute with clj:
#+begin_src bash :tangle yes
clj -m test
#+end_src

Or with genie:
#+begin_src bash :tangle yes
genie.clj ./test.clj
#+end_src

* Creating a script
To create a script and deps.edn file from templates:
#+begin_src bash :tangle yes
./scripts/genie_new.clj /path/to/new/script.clj
#+end_src

This uses template.clj and deps.edn from the template directory (GENIE_TEMPLATE_DIR)
* Testing
See directory test, with these scripts:
- test.clj - test various parts, including logging and stdout/err handling
- test_dyn_cl - test dynamic classloading
- more scripts in the 'test' directory

Also from the 'test' directory:
#+begin_src bash :tangle yes
./run-all-tests.clj
#+end_src

| Test                    | Notes                                              |
|-------------------------+----------------------------------------------------|
| run-all-tests.clj       | Start a daemon, run all tests and stop daemon      |
| bb_pipe.clj             | Babashka test script for piping stdin->stdout      |
| bb_stdout.clj           | Babashka test script for generating delayed output |
| test_add_numbers.clj    | Add numbers from cmdline                           |
| test.clj                | Several tests with log, stdout, stderr             |
| test_divide_by_0.clj    | Test if exceptions are returned                    |
| test_dyn_cl.clj         | Test dynamic class-loader                          |
| test_head.clj           | Read a text file                                   |
| test_load_file2.clj     | Load/source a library, take 2                      |
| test_load_file.clj      | Load/source a library, take 1                      |
| test_load_file_lib.clj  | Library loaded by test_load_file(2).clj            |
| test_log_concurrent.clj | Test if concurrent logs don't get mixed up         |
| test_loggers.clj        | Test if loggers in script, client and daemon work  |
| test_no_namespace.clj   | Test without a script namespace                    |
| test_params.clj         | Test command line parameters                       |
| test_stdin.clj          | Test reading stdin                                 |
| test_stdout_stderr.clj  | Test output to stdout and stderr                   |
| test_two_namespaces.clj | Test with 2 namespaces in a file                   |
| test_write_file.clj     | Test writing a text file                           |
* Todo
- See [[file:docs/todo.org]] for details.
- More real world using and testing
* Related projects
Some Clojure-like languages having fast startup, but not all Clojure/JVM functionality:
- Babashka
- Janet
- Hy
- more...

Some earlier projects, which do not seem to be actively maintained:
- Grenchman
- Cake
- more...

* More docs
- [[file:docs/todo.org]]
- [[file:docs/background.org]]
- [[file:genied/codox/index.html][API docs]]
* License
Copyright Â© 2021 Nico de Vreeze

Distributed under the Eclipse Public License, the same as Clojure.

See [[file:LICENSE]]
