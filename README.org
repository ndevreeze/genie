#+STARTUP: content indent
#+title: Genie - Run Clojure scripts with a daemon process
* Introduction
Another way of mitigating the slow startup of Clojure on the JVM, by starting a daemon in the background. Using the following projects:
- [[https://nrepl.org/nrepl/index.html][nRepl]] - for running the daemon and providing client connections (using bencode).
- [[https://github.com/clj-commons/pomegranate][Pomegranate]] - for dynamically loading libraries
- [[https://book.babashka.org][Babashka]] - for the client and installation script.
** Why Genie?
From https://www.wordnik.com/words/genie:
- noun - A supernatural creature who does one's bidding when summoned.
- noun - A fictional magical being that is typically bound to obey the commands of a mortal possessing its container.

So the genie in this case is the daemon process containing the nRepl server, waiting to execute Clojure scripts when summoned. It might help to see the daemon as part of the OS.
* Goals
- Every script that can be executed by clj (using deps.edn) should also be able to be executed using Genie. And therefore you can also develop your script using e.g. CIDER.
- Fast startup of scripts.
- Performance similar to Clojure itself, as it is still Clojure on the JVM.
- Cross-platform: supports Linux, Windows and MacOS.

Non-goals:
- The fastest possible startup - running with a client/server setup implies some (local) network overhead.
- Supporting long-running, full applications. Use default Clojure if you need this.
* Installation
** Prerequisites
- Java (>= v11)
- Clojure (>= v10)
- Genie uses [[https://book.babashka.org][Babashka]] for the client and installation. So make sure you have this installed.
- [[https://leiningen.org][Leiningen]] is used for creating an uberjar. This will reduce daemon startup time.
** Install with Babashka
#+begin_src bash :tangle yes
  bb ./install.clj
#+end_src

Install directories may be given, and some other options:
#+begin_src bash :tangle yes
$ bb ./install.clj -h
install.clj - Babashka script to install Genie:
  daemon, client, config, scripts and template
      --daemon DAEMON               Daemon directory
      --client CLIENT               Client directory
      --config CONFIG               Config directory
      --logdir LOGDIR               Logging dir for daemon and client
      --scripts SCRIPTS             Scripts directory
      --template TEMPLATE           Template directory
      --dryrun                      Show what would have been done
      --create-uberjar              Force (re-)creating uberjar
      --start-on-system-boot        Install Windows genied.bat in startup folder
  -p, --port PORT             7888  Genie daemon port number (for start-on-system-boot)
  -v, --verbose                     Verbose output
  -h, --help                        Show help

#+end_src

With default locations:
| item       | default location         | Related environment variables             |
|------------+--------------------------+-------------------------------------------|
| java       | <system>                 | GENIE_JAVA_CMD, JAVA_CMD, JAVA_HOME, java |
| daemon/jar | ~/tools/genie, lein run  | GENIE_DAEMON_DIR (also genied.sh)         |
| config     | ~/.config/genie          | GENIE_CONFIG_DIR (also templates)         |
| log-dir    | ~/log                    | GENIE_LOG_DIR                             |
| templates  | ~/.config/genie/template | GENIE_TEMPLATE_DIR, GENIE_CONFIG_DIR      |
| scripts    | ~/bin                    | GENIE_SCRIPTS_DIR                         |
| client     | ~/bin                    | GENIE_CLIENT_DIR                          |

If you face issues creating an uberjar from the installer, try it directly with Leiningen:
#+begin_src bash
cd genied
lein uberjar
#+end_src

The installer will try to overwrite binaries and scripts with new versions, but will not touch existing config files and templates.
** Set environment variables
You might want to add the following environment vars to your .profile (see output of install.clj):
#+begin_src bash
export GENIE_CLIENT_DIR=~/bin
export GENIE_DAEMON_DIR=~/tools/genie
export GENIE_JAVA_CMD=java
export GENIE_CONFIG_DIR=~/.config/genie
export GENIE_LOG_DIR=~/log
export GENIE_TEMPLATE_DIR=~/.config/genie/template
export GENIE_SCRIPTS_DIR=~/bin
#+end_src
** Start automatically at system boot
And add a crontab entry so the Genie daemon starts automatically:
#+begin_src bash
@reboot /home/your-user-name/tools/genie/genied.sh
#+end_src

Check genied.sh for giving java options like -Xmx.

Or, in Windows: see [[file:docs/windows.org]].
* Test without installation
If you want to check out Genie without installing it, assuming you have Babashka and Leiningen installed (this uses 'lein run'):
#+begin_src bash :tangle yes
bb client/genie.clj --start-daemon
bb client/genie.clj test/test.clj -a
#+end_src

* Usage
An example script is shown below.

#+begin_src clojure :tangle yes
  #! /usr/bin/env genie

  (ns test
    (:require 
     [ndevreeze.cmdline :as cl]
     [clojure.data.csv :as csv]))

  (def cli-options
    [["-c" "--config CONFIG" "Config file"]
     ["-h" "--help" "Show this help"]])

  (defn data-csv
    [opt ctx]
    (println "Parsing csv using data.csv: " (csv/read-csv "abc,123,\"with,comma\"")))

  (defn script [opt arguments ctx]
    (println "ctx: " ctx)
    (data-csv opt ctx))

  ;; expect context/ctx now as first parameter, a map.
  (defn main [ctx args]
    (cl/check-and-exec "" cli-options script args ctx))

  ;; for use with 'clj -m test-dyn-cl
  (defn -main
    "Entry point from clj cmdline script"
    [& args]
    (cl/check-and-exec "" cli-options script args {:cwd "."})
    (System/exit 0))

#+end_src

A deps.edn should be in the same directory:
#+begin_src clojure :tangle yes
  {:paths [""] ;; so script will be found in current dir, not in src-subdir.
   :deps
   {clojure.java-time/clojure.java-time {:mvn/version "0.3.2"}
    org.clojure/clojure {:mvn/version "1.10.1"}
    org.clojure/data.csv {:mvn/version "1.0.0"}}}
#+end_src

Then execute with clj:
#+begin_src bash :tangle yes
clj -m test
#+end_src

Or with genie:
#+begin_src bash :tangle yes
genie.clj ./test.clj
#+end_src

** Command line options
The genie.clj Babashka client has several options:
#+begin_src bash :tangle yes
$ client/genie.clj -h
genie.clj - Babashka script to run scripts in Genie daemon
  -p, --port PORT                     7888  Genie daemon port number
  -m, --main MAIN                           main ns/fn to call. Empty: get from script ns-decl
  -l, --logdir LOGDIR                       Directory for client log. Empty: no logging
      --deps DEPS                           Use different deps.edn file
  -v, --verbose                             Verbose output
  -h, --help                                Show help
      --max-lines MAX-LINES           1024  Max #lines to read/pass in one message
      --noload                              Do not load libraries and scripts
      --nocheckdaemon                       Do not perform daemon checks on errors
      --nosetloader                         Do not set dynamic classloader
      --nomain                              Do not call main function after loading
      --nonormalize                         Do not normalize parameters to script (rel. paths)
      --list-sessions                       List currently open/running sessions/scripts
      --kill-sessions SESSIONS              csv list of (part of) sessions, or 'all'
      --start-daemon                        Start daemon running on port
      --stop-daemon                         Stop daemon running on port
      --restart-daemon                      Restart daemon running on port
      --max-wait-daemon MAX_WAIT_SEC  60    Max seconds to wait for daemon to start

#+end_src
** Command line parameters
When we give command line parameters to a client script, these might be references to relative files. The client tries to convert these to absolute paths for the daemon:
- If it's a dot (.) or starts with ./ it is converted to an absolute path
- If the parameter value exists as a local file, it is converted to an absolute path
- if --nonormalize is given, this conversion is not done.
- Scripts can use the (:cwd ctx) value to get the working directory of the script.
* Creating a script
To create a script and deps.edn file from templates:
#+begin_src bash :tangle yes
./scripts/genie_new.clj /path/to/new/script.clj
#+end_src

This uses template.clj and deps.edn from the template directory (GENIE_TEMPLATE_DIR). For more details see [[file:docs/background.org]].
* Testing
See directory test, with these scripts:
- test.clj - test various parts, including logging and stdout/err handling
- test_dyn_cl - test dynamic classloading
- more scripts in the 'test' directory

Also from the 'test' directory:
#+begin_src bash :tangle yes
$ test/run-all-tests.clj -h
run-all-tests.clj - run all genie tests in this directory
  -p, --port PORT             7887  Genie daemon port number for test
  -l, --logdir LOGDIR               Directory for client log. Empty: no logging
  -v, --verbose                     Verbose output
  -h, --help                        Show help
      --clj                         Use clj instead of genie to run scripts
      --no-start-stop-daemon        Do not start a daemon before the tests
#+end_src

| Test                    | Notes                                              |
|-------------------------+----------------------------------------------------|
| run-all-tests.clj       | Start a daemon, run all tests and stop daemon      |
| bb_pipe.clj             | Babashka test script for piping stdin->stdout      |
| bb_stdout.clj           | Babashka test script for generating delayed output |
| test_add_numbers.clj    | Add numbers from cmdline                           |
| test.clj                | Several tests with log, stdout, stderr             |
| test_divide_by_0.clj    | Test if exceptions are returned                    |
| test_dyn_cl.clj         | Test dynamic class-loader                          |
| test_head.clj           | Read a text file                                   |
| test_load_file2.clj     | Load/source a library, take 2                      |
| test_load_file.clj      | Load/source a library, take 1                      |
| test_load_file_lib.clj  | Library loaded by test_load_file(2).clj            |
| test_log_concurrent.clj | Test if concurrent logs don't get mixed up         |
| test_loggers.clj        | Test if loggers in script, client and daemon work  |
| test_no_namespace.clj   | Test without a script namespace                    |
| test_params.clj         | Test command line parameters                       |
| test_stdin.clj          | Test reading stdin                                 |
| test_stdout_stderr.clj  | Test output to stdout and stderr                   |
| test_two_namespaces.clj | Test with 2 namespaces in a file                   |
| test_write_file.clj     | Test writing a text file                           |
* Security
The daemon should run under a standard (non-root) user. All scripts are executed under this user's credentials. The daemon only listens on localhost. In theory it should be possible to connect over the (local) network, but you probably do not want this.
* Todo
- See [[https://github.com/ndevreeze/genie/issues][Issues on Github]]
- See [[file:docs/todo.org]] for details.
- More real world using and testing
* Related projects
Some Clojure-like languages having fast startup, but not all Clojure/JVM functionality:
- [[https://babashka.org/][Babashka]] - Clojure implementation based on SCI.
- [[https://github.com/dundalek/closh][Closh]] - Shell comparable to Bash
- [[https://imagej.net/Clojure_Scripting][Fiji]] - from ImageJ, image processing, with Clojure scripting embedded.
- [[https://www.graalvm.org/java/][GraalVM]] - Compile to platform binaries
- [[https://janet-lang.org/][Janet]] - own VM
- [[https://github.com/candid82/joker][Joker]] - implementation in Go
- [[https://docs.hylang.org/en/alpha/][Hy]] - Python VM
- [[https://github.com/anmonteiro/lumo][Lumo]] - JavaScript
- [[https://github.com/pixie-lang/pixie][Pixie]] - own VM
- [[https://planck-repl.org/][Planck]] - JavaScript

Some earlier projects, which do not seem to be actively maintained:
- [[https://leiningen.org/grench.html][Grenchman]] - fast invocation of Clojure code over nREPL
- [[https://github.com/ninjudd/cake][Cake]] - merged with Leiningen
- [[https://github.com/ninjudd/drip][Drip]] - Keeps a JVM in reserve.
- [[http://inlein.org/][Inlein]] - mostly for setting up classpath, a new JVM is started for each script-run.
- [[http://icylisper.in/jark][Jark]] - seems offline. But [[https://github.com/scottjad/jark][Jark]] still exists.
- [[https://github.com/arohner/lein-daemon][Lein-daemon]] - A leiningen plugin for daemonizing a clojure process (deprecated)
- [[https://github.com/circleci/lein-jarbin][Lein-jarbin]] - successor of lein-daemon
- [[https://github.com/facebook/nailgun][Nailgun]] - client, protocol, and server for running Java programs from the command line without incurring the JVM startup overhead. See also the nice [[http://www.martiansoftware.com/nailgun/background.html][background]] information.
- [[https://github.com/benwbooth/quick-clojure][QuickClojure]] - Python client, somewhat similar to Genie. Last update in 2015.
- [[https://git.sr.ht/~technomancy/shevek/][Shevek]] - nRepl client made with [[https://fennel-lang.org/][Fennel]] (Lua).

And a [[https://www.reddit.com/r/Clojure/comments/3qb9nz/clojure_for_command_line_scripts_idea_feasibility/][Discussion]] about some possibilities from 2016.
* More docs
- [[file:docs/todo.org]]
- [[file:docs/background.org]] - If you want to know the details, and maybe want contribute
- [[file:docs/performance.org]]
- [[file:docs/windows.org]] - Specific issues when running on Windows.
- API docs: TODO
* License
Copyright © 2021 Nico de Vreeze

Distributed under the Eclipse Public License, the same as Clojure.

See [[file:LICENSE]]
